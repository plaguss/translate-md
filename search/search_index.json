{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"translate-md","text":"<p>Python client to spanglish, and a bit more. Translate your markdown files from english \ud83c\uddec\ud83c\udde7 to spanish \ud83c\uddea\ud83c\uddf8.</p> CI/CD Docs Package Meta <p>This project was developed for my personal use: translating markdown files from my blog posts. It may be useful for somebody (I would be honored to listen to that), but please don't expect everything correct to the detail.</p> <p>Anyway, the API is not expected to change unless some extra feature is required. Contributions are welcome!</p> <p>To see the features along some examples, please visit the docs.</p>"},{"location":"#installation","title":"\ud83d\udd27 Installation","text":"<pre><code>pip install translate-md\n</code></pre> <p>This client depends on a service which is currently expected tu run locally. You would need to get it to work:</p>"},{"location":"#additional-dependencies","title":"Additional dependencies","text":"<p>You will need spanglish running in order to start working. The easiest way is to clone the repo and use docker for it. Get the service up you should be ready to go.</p>"},{"location":"#cli-version","title":"CLI version","text":"<p>It may be convenient for some cases, so the library comes with a CLI with a subset of the functionality:</p> <pre><code>pip install translate-md[cli]\n</code></pre> <p>Or maybe better with pipx</p> <pre><code>pipx install translate-md[cli]\n</code></pre> <p>Visit the docs for further information.</p>"},{"location":"#documentation","title":"\ud83d\udcdd Documentation","text":"<p>The documentation is made with Material for MkDocs and is hosted by GitHub Pages.</p>"},{"location":"usage/","title":"Overview","text":"<p>This section shows a guided example using the CLI and the python API.</p> <p>First of all, make sure that the spanglish service is up and running (take a look to the guide if you haven't done it yet). Using docker compose, un a separate window run <code>docker compose up</code>, or docker directly if prefered (just use the <code>run.sh</code> file).</p>"},{"location":"usage/#cli","title":"CLI","text":"<p>For convenience, a command line app can be installed, with the functionality just to translate a markdown file for the moment (check the README file for the installation instructions):</p> <pre><code>$ translate-md tests/data/post-example.md\n</code></pre> <p>By default a new file will be created at <code>tests/data/post-example.es.md</code>, otherwise use <code>--new-filename</code> to give a different name.</p>"},{"location":"usage/#python-api","title":"Python API","text":"<p>Lets see a tour of the Python API.</p>"},{"location":"usage/#instantiate-the-client","title":"Instantiate the client","text":"<p>Lets start by importing the code </p> <pre><code>from translate_md.client import SpanglishClient\nclient = SpanglishClient()\nprint(client)\nSpanglishClient(http://localhost:8000/) \n</code></pre> <p>By default it assumes the server is running on http://localhost:8000/.</p>"},{"location":"usage/#translate-a-piece-of-text","title":"Translate a piece of text","text":"<pre><code>michael_scott = \"\"\"Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.\"\"\"\nprint(client.translate(michael_scott))\n</code></pre> <p>which would yield:</p> <pre><code>A veces voy a empezar una frase y ni siquiera s\u00e9 a d\u00f3nde va.\n</code></pre>"},{"location":"usage/#translate-a-batch-of-texts","title":"Translate a batch of texts","text":"<pre><code>dwitght_schrute = \"\"\"Whenever I'm about to do something, I think, 'Would an idiot do that?' and if they would, I do not do that thing.\"\"\"\nmichael_scott = \"\"\"I knew exactly what to do, but in a much more real sense I had no idea what to do.\"\"\"\nandy_bernard = \"Sorry I annoyed you with my friendship\"\njim_halpert = \"Bears, beets, Battlestar Galactica.\"\ncreed_bratton = \"\"\"Oh, you\u2019re paying way too much for worms. Who\u2019s your worm guy?\"\"\"\noscar_martinez = \"\"\"I consider myself a good person, but I'm gonna try to make him cry.\"\"\"\nprison_mike = \"The worst thing about prison was the Dementors.\"\nkelly_kapoor = \"\"\"Who says exactly what they\u2019re thinking? What kind of a game is that?\"\"\"\nstanley_hudson = \"\"\"Boy, have you done lost your mind? Cause I\u2019ll help you find it!\"\"\"\nprint(client.translate_batch([\ndwitght_schrute, michael_scott, andy_bernard, jim_halpert,\ncreed_bratton, oscar_martinez, prison_mike, kelly_kapoor,\nstanley_hudson\n]))\n</code></pre> <p>Which would yield</p> <pre><code>[\n\"Siempre que estoy a punto de hacer algo, pienso, '\u00bfHar\u00eda eso un idiota?' y si lo hicieran, no lo hago.\",\n'Yo sab\u00eda exactamente qu\u00e9 hacer, pero en un sentido mucho m\u00e1s real no ten\u00eda idea de qu\u00e9 hacer.',\n'Lo siento te molest\u00e9 con mi amistad',\n'Osos, remolachas, Battlestar Galactica.',\n'Oh, t\u00fa\u2019 est\u00e1s pagando demasiado por gusanos. \u00bfQui\u00e9n\u2019 es tu gusano?',\n'Me considero una buena persona, pero voy a tratar de hacerlo llorar.',\n'Lo peor de la prisi\u00f3n fueron los Dementores.',\n'\u00bfQui\u00e9n dice exactamente lo que ellos\u2019re pensando? \u00bfQu\u00e9 tipo de juego es eso?',\n'Muchacho, \u00bfhas perdido la cabeza? Porque yo\u2019 te ayudar\u00e9 a encontrarlo!'\n]\n</code></pre>"},{"location":"usage/#translate-a-markdown-file","title":"Translate a markdown file","text":"<p>The following example uses a sample file placed in the tests folder of this repo. You can copy the content to a file and change the filename variable appropriately to run the example (If new_filename argument is not given if will be automatically generated, in this case changing the name to <code>post-example.es.md</code> on the same directory):</p> <pre><code>from pathlib import Path\nfilename = Path.cwd() / \"tests/data/post-example.md\"\nnew_filename = Path.home() / \"Downloads\" / \"example_file.es.md\"\nclient.translate_file(filename, new_filename=new_filename)\n</code></pre> <p>TODO: Write result before and after</p>"},{"location":"usage/#dealing-with-the-markdown-file","title":"Dealing with the markdown file","text":"<p>In case its needed, one can deal with the markdown file without a problem:</p> <pre><code>import translate_md.markdown as md\nmd_content = md.read_file(filename)\nproc = md.MarkdownProcessor(md_content)\n</code></pre> <p><code>md.MarkdownProcessor</code> is a wrapper of the wonderful <code>markdown-it-py</code>'s <code>MarkdownIt</code> class to deal with the files tokens.</p> <pre><code>&gt;&gt;&gt; print(proc)\nMarkdownProcessor(54)\n</code></pre> <p>We can access to the text content which will be translated by calling the <code>get_pieces</code> method:</p> <pre><code>pieces = proc.get_pieces()\n</code></pre> <p>This will return the list of paragraphs to be sent to the API:</p> <pre><code>&gt;&gt;&gt; print(pieces[:3])\n[\n'This is a sample article to showcase the capabilities of the program. Its a moddification of a sample file from gohugo repo.',\n'## Title',\n\"This paragraph contains the presentation of the blog post. It's usually written with some type of heading.\"\n]\n</code></pre> <p>After getting these pieces translated we should update the content of the original file and we are ready to obtain the translated file</p> <pre><code>proc.update(pieces)\nproc.write_to(new_filename)\n</code></pre> <p>Thats it!</p>"},{"location":"usage/#a-note-on-the-expected-behavior","title":"A note on the expected behavior","text":"<p>For the moment, there is no cleaning of the markdown content before being sent to the translator, which can create some errors with the content obtained. The output file obtained should be treated as a draft.</p> <p>The following table shows a comparison of the input file (left) and the output (right):</p> English version Versi\u00f3n en castellano post-example-screenshot post-example-screenshot.es <p>The images may be small, in case you want to see them they are placed under under the <code>tests/data</code> folder.</p> <p>We can see the text paragraphs translated (the front-matter, comments, code blocks and figures (only when written as a separate paragraph)), with the remaining content untouched. Some errors are yet to be treated, like keeping the lists with the appropriate format.</p>"},{"location":"api/client/","title":"Client","text":"<p>This section contains the reference for the implementation of translate-md's <code>SpanglishClient</code>.</p>"},{"location":"api/client/#src.translate_md.client.SpanglishClient","title":"SpanglishClient","text":"<pre><code>SpanglishClient(url: str = SPANGLISH_URL) -&gt; None\n</code></pre> <p>Client to interact with the Spanglish service.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL where the service is exposed. Defaults to SPANGLISH_URL.</p> <code>SPANGLISH_URL</code>"},{"location":"api/client/#src.translate_md.client.SpanglishClient.translate","title":"translate","text":"<pre><code>translate(text: str) -&gt; str\n</code></pre> <p>Translate a piece of text from english to spanish.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>string to translate.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>translated text</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client.translate(\"hello world\")\n'hola mundo'\n</code></pre>"},{"location":"api/client/#src.translate_md.client.SpanglishClient.translate_batch","title":"translate_batch","text":"<pre><code>translate_batch(texts: list[str]) -&gt; list[str]\n</code></pre> <p>Translates a batch of texts.</p> <p>Instead of calling repeatedly on a loop the method <code>translate</code>, this method should be preferred, send a list of texts to translate and get them back in the same order.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>list[str]</code> <p>Texts to translate</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: list of texts translated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client.translate_batch([\"hello\", \"world\", \"one\", \"two\"])\n[\"hola\", \"mundo\", \"uno\", \"dos\"]\n</code></pre>"},{"location":"api/client/#src.translate_md.client.SpanglishClient.translate_file","title":"translate_file","text":"<pre><code>translate_file(\nfilename: Path, new_filename: Optional[Path] = None\n) -&gt; None\n</code></pre> <p>Takes the filename of a markdown file in disk and processes to obtain the paragraphs which contain text, sends them to translate them and replaces the new text. Finally writes the new document to disk.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>Path</code> <p>Path to the markdown file.</p> required <code>new_filename</code> <code>Optional[Path]</code> <p>Filename for the new markdown file to be generated. Defaults to None, in which case it is generated internally.</p> <code>None</code>"},{"location":"api/markdown/","title":"Markdown","text":"<p>This section contains the reference for the implementation of translate-md's <code>MarkdownProcessor</code> and helper functions.</p>"},{"location":"api/markdown/#src.translate_md.markdown.MarkdownProcessor","title":"MarkdownProcessor","text":"<pre><code>MarkdownProcessor(markdown_content: str) -&gt; None\n</code></pre> <p>Class that allows to work with a markdown file, extracting the text content to be translated.</p> <p>The expected format of the markdown file is the one used in hugo for blogging.</p> <p>Parameters:</p> Name Type Description Default <code>markdown_content</code> <code>str</code> <p>The content of a markdown file as a string.</p> required Notes <p>See gohugo for type of markdown files</p>"},{"location":"api/markdown/#src.translate_md.markdown.MarkdownProcessor.tokens","title":"tokens  <code>property</code>","text":"<pre><code>tokens: list[Token]\n</code></pre> <p>Parsed pieces of the markdown file. The content will be extracted from these pieces, updated and created back.</p>"},{"location":"api/markdown/#src.translate_md.markdown.MarkdownProcessor.get_pieces","title":"get_pieces","text":"<pre><code>get_pieces() -&gt; list[str]\n</code></pre> <p>Gets the pieces of the markdown file to be translated.</p> <p>The relevant pieces are those tokens considered of type 'inline' and which aren't the front matter, a figure, code or markdown comments.</p> <p>Internally stores the position of the corresponding tokens for later use.</p>"},{"location":"api/markdown/#src.translate_md.markdown.MarkdownProcessor.render","title":"render","text":"<pre><code>render() -&gt; str\n</code></pre> <p>Get a new markdown file with the paragraphs translated.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>list[str]</code> <p>List of texts to insert back to the</p> required"},{"location":"api/markdown/#src.translate_md.markdown.MarkdownProcessor.update","title":"update","text":"<pre><code>update(texts: list[str]) -&gt; None\n</code></pre> <p>Update the content with the translated pieces.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>list[str]</code> <p>List of texts to insert back to the</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the number of texts to update don't match the number of texts obtained from get_pieces method.</p> See Also <p><code>get_pieces</code></p>"},{"location":"api/markdown/#src.translate_md.markdown.MarkdownProcessor.write_to","title":"write_to","text":"<pre><code>write_to(filename: Path) -&gt; None\n</code></pre> <p>Write the content of the updated markdown to disk.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>Path</code> <p>Name of the new file.</p> required"},{"location":"api/markdown/#src.translate_md.markdown.read_file","title":"read_file","text":"<pre><code>read_file(filename: Path) -&gt; str\n</code></pre> <p>Read a whole markdown file to a string, just a helper function.</p>"},{"location":"api/markdown/#src.translate_md.markdown.is_front_matter","title":"is_front_matter","text":"<pre><code>is_front_matter(text: str) -&gt; bool\n</code></pre> <p>Check if a token pertains to the front matter.</p> <p>The check seeks if the string starts with '---' and the word <code>title</code> after a single line jump (it will fail if some space is inserted between them), and ends with '---'.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>text obtained in the Token's content. Expects to be applied to the tokens from a markdown parsed.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p>"},{"location":"api/markdown/#src.translate_md.markdown.is_figure","title":"is_figure","text":"<pre><code>is_figure(text: str) -&gt; bool\n</code></pre> <p>Check if a paragraph is just a picture in the doc.</p> <p>Some lines may contain just a picture, and there is no reason to translate those. i.e. '' The type of check is not perfect, it just fits my needs.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>text obtained in the Token's content.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code>"},{"location":"api/markdown/#src.translate_md.markdown.is_code","title":"is_code","text":"<pre><code>is_code(text: str) -&gt; bool\n</code></pre> <p>Check if a blob of text is a chunk of code.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>text obtained in the Token's content.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p>"},{"location":"api/markdown/#src.translate_md.markdown.is_comment","title":"is_comment","text":"<pre><code>is_comment(text: str) -&gt; bool\n</code></pre>"}]}